<tsd:ApplicationWindowBase  x:Class="TeklaHierarchicDefinitions.MainWindow"
                            Name="ThisWindow"
                            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                            xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                            xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                            xmlns:UIControls="clr-namespace:Tekla.Structures.Dialog.UIControls;assembly=Tekla.Structures.Dialog" 
                            xmlns:tsd="clr-namespace:Tekla.Structures.Dialog;assembly=Tekla.Structures.Dialog"
                            xmlns:Convertors="clr-namespace:TeklaHierarchicDefinitions"
                            Icon="pack://application:,,,/THD;component/Resources/Element list.png"
                            xmlns:local="clr-namespace:TeklaHierarchicDefinitions"
                            xmlns:vm="clr-namespace:TeklaHierarchicDefinitions.ViewModels"
                            mc:Ignorable="d"
                            Title="{tsd:Loc albl_WindowName}"
                            Height="450" Width="1000" MinWidth="1050" MinHeight="400" Topmost="True">
    <Window.Resources>
        <Convertors:LevelToIndentConverter x:Key="LevelToIndentConverter"/>
    </Window.Resources>
    <Window.DataContext>
        <vm:BillOfElementsViewModel/>
    </Window.DataContext>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="150"/>
            <ColumnDefinition Width="50"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="50"/>
            <RowDefinition Height="50"/>
            <RowDefinition Height="50"/>
            <RowDefinition Height="50"/>
            <RowDefinition/>
            <RowDefinition Height="50"/>
        </Grid.RowDefinitions>
        <DataGrid Name="HODataGrid"
                  Margin="10" ItemsSource="{Binding BillOfElements, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                  CanUserAddRows="False" CanUserResizeColumns="False" 
                  CanUserResizeRows="False" HeadersVisibility="Column" 
                  CellEditEnding="HODataGrid_CellEditEnding"
                  SelectedItem="{Binding SelectedItem}" 
                  SelectionChanged="HODataGrid_SelectionChanged"
                  AutoGenerateColumns="False" Grid.ColumnSpan="1" Grid.RowSpan="6"
                  IsReadOnly="{Binding ModificationBlocked, NotifyOnSourceUpdated=True}">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="{tsd:Loc albl_Selection}"  >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <CheckBox IsChecked="{Binding Selection, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                          Command="{Binding DataContext.UpdateButtonsAccessCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                </CheckBox>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="{tsd:Loc albl_BOE}" Binding="{Binding BOE, UpdateSourceTrigger=PropertyChanged}" />
                <!--<DataGridTemplateColumn Header="ВЭ" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <TextBox 
                                    Text="{Binding BOE, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0" 
                                    IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}">
                                    <TextBox.InputBindings>

                                        <KeyBinding  Command="{Binding DataContext.UpdateBillOfElementsList, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                                                     Key="Enter">
                                            
                                        </KeyBinding>
                                    </TextBox.InputBindings>
                                </TextBox>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>-->
                <!--<DataGridTemplateColumn Header="{tsd:Loc albl_Presets}"  >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <ComboBox ItemsSource ="{Binding ElementPresetList, UpdateSourceTrigger =PropertyChanged}" 
                                          SelectedItem="{Binding ElementSelectedPreset, UpdateSourceTrigger =PropertyChanged}"/>

                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>-->
                <DataGridTextColumn Header="{tsd:Loc albl_Mark}" 
                                    Binding="{Binding Mark, UpdateSourceTrigger=PropertyChanged}" 
                                    FontWeight="Bold"/>
                <DataGridTextColumn Header="{tsd:Loc albl_Classificator}" 
                                    Binding="{Binding Classificator, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                                    FontWeight="Bold"/>

                <DataGridTextColumn Header="{tsd:Loc albl_Father}" IsReadOnly="True" Binding="{Binding Father}"/>
                <DataGridTextColumn Header="{tsd:Loc albl_Position}"                                     
                                    Binding="{Binding Position, UpdateSourceTrigger=PropertyChanged}" />
                <DataGridTextColumn Header="{tsd:Loc albl_Material}" Binding="{Binding Material, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="{tsd:Loc albl_Profile}" Binding="{Binding Profile, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" />
                <DataGridTextColumn Header="{tsd:Loc albl_ProfileForSpec}" Binding="{Binding ProfileForSpec, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTemplateColumn Header="M"  >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <DockPanel Grid.Row="0">
                                    <Label Content="S="/>
                                    <TextBox Text="{Binding M, UpdateSourceTrigger=PropertyChanged}" Grid.Row="1"/>
                                    
                                </DockPanel>
                                <DockPanel Grid.Row="1">
                                    <Label Content="E="/>
                                    <TextBox Text="{Binding M_end, UpdateSourceTrigger=PropertyChanged}" Grid.Row="0"/>
                                </DockPanel>                                
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="N"  >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <DockPanel Grid.Row="0" Grid.Column="0">
                                    <Label Content="Smax="/>
                                    <TextBox Text="{Binding N, UpdateSourceTrigger=PropertyChanged}" />

                                </DockPanel>
                                <DockPanel Grid.Row="1" Grid.Column="0">
                                    <Label Content="Emax="/>
                                    <TextBox Text="{Binding N_end, UpdateSourceTrigger=PropertyChanged}" />
                                </DockPanel>
                                <DockPanel Grid.Row="0" Grid.Column="1">
                                    <Label Content="Smin="/>
                                    <TextBox Text="{Binding N_start_min, UpdateSourceTrigger=PropertyChanged}" />

                                </DockPanel>
                                <DockPanel Grid.Row="1" Grid.Column="1">
                                    <Label Content="Emin="/>
                                    <TextBox Text="{Binding N_end_min, UpdateSourceTrigger=PropertyChanged}" />
                                </DockPanel>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Q"  >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <DockPanel Grid.Row="0">
                                    <Label Content="S="/>
                                    <TextBox Text="{Binding Q, UpdateSourceTrigger=PropertyChanged}" />

                                </DockPanel>
                                <DockPanel Grid.Row="1">
                                    <Label Content="E="/>
                                    <TextBox Text="{Binding Q_end, UpdateSourceTrigger=PropertyChanged}" />
                                </DockPanel>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="{tsd:Loc albl_Notes}" Binding="{Binding Notes, UpdateSourceTrigger=PropertyChanged}"/>
                
                <DataGridTextColumn Header="{tsd:Loc albl_Sketch}" Binding="{Binding Sketch, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" />
                <DataGridCheckBoxColumn Header="{tsd:Loc albl_Cross_section_on_other_list}" Binding="{Binding OnOtherList, UpdateSourceTrigger=PropertyChanged}"/>
                <!--<DataGridCheckBoxColumn Header="{tsd:Loc albl_Is_complex_cross_section}" Binding="{Binding IsComplexCrossSection, UpdateSourceTrigger=PropertyChanged}"/>-->
                <DataGridTextColumn Header="{tsd:Loc albl_Ref_list}" Binding="{Binding RefList, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="{tsd:Loc albl_Empty_rows_number}" Binding="{Binding EmptyRowsNumber, UpdateSourceTrigger=PropertyChanged}"/>

                <!--<DataGridTextColumn Header="GUID" Binding="{Binding GUID}" />-->
                <!--<DataGridTextColumn Header="Father GUID" Binding="{Binding FatherGUID}" />-->
                <!--<DataGridTemplateColumn Header="Выбор" Width="60" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <UIControls:WpfMaterialCatalog x:Name="materialCatalog" 
                                                           HorizontalAlignment="Center" 
                                                           VerticalAlignment="Center" 
                                                           Height="30"
                                                           SelectClicked="MaterialCatalog_SelectClicked"  
                                                           SelectionDone="MaterialCatalog_SelectionDone" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>-->
            </DataGrid.Columns>


        </DataGrid>

        <Button x:Name="AddModelObjectToHierarchicObject" Content="{tsd:Loc albl_Attach_parts}" HorizontalAlignment="Left" Margin="10,10,0,0" 
                Grid.Row="6" VerticalAlignment="Top" Width="130" Height="30" 
                Command="{Binding AddModelObjectToHierarchicObject_Click}" 
                CommandParameter="{Binding ElementName=HODataGrid}"/>
        <CheckBox x:Name="HightlightObjects" Content="{tsd:Loc albl_Highlight_objects_in_model_view}" 
                  HorizontalAlignment="Left" Margin="150,10,0,0" Grid.Row="6" 
                  VerticalAlignment="Top" Height="30" Width="200"/>
        <Button x:Name="RemoveModelObjectFromHierarchicObject" 
                Content="{tsd:Loc albl_Remove_parts}" HorizontalAlignment="Left" Margin="360,10,0,0" 
                Command="{Binding RemoveModelObjectFromHierarchicObject_Click}" 
                CommandParameter="{Binding ElementName=HODataGrid}"
                Grid.Row="6" VerticalAlignment="Top" Width="120" Height="30"/>
        <!--<Button Content="Select material" Grid.Column="1" Margin="10" Grid.Row="2" IsEnabled="{Binding ButtonIsEnabled}"
                Command="{Binding SelectMaterialForHierarchicObject_Click}" 
                CommandParameter="{Binding ElementName=HODataGrid}"/>-->
        <Label Content="{tsd:Loc albl_Select_profile}" Grid.Column="1" Margin="10,10,0,10" Grid.Row="1" VerticalAlignment="Top" 
               Height="30" controls:ControlsHelper.ContentCharacterCasing="Upper"/>
        <UIControls:WpfMaterialCatalog x:Name="materialCatalog" Grid.Column="2"
                                       Height="30" Margin="10" Grid.Row="2" 
                                       Width="30" HorizontalAlignment="Center" 
                                       IsEnabled="{Binding ButtonIsEnabled, NotifyOnSourceUpdated=True}" 
                                       SelectClicked="MaterialCatalog_SelectClicked" 
                                       SelectionDone="MaterialCatalog_SelectionDone" />
        <Label Content="{tsd:Loc albl_Select_material}" Grid.Column="1" Grid.Row="2" Margin="10,10,0,10" controls:ControlsHelper.ContentCharacterCasing="Upper" />
        <UIControls:WpfProfileCatalog x:Name="profileCatalog" HorizontalAlignment="Left" Height="30" 
                                      Margin="10,10,0,0" Grid.Row="1" Grid.Column="2" VerticalAlignment="Top" 
                                      Width="30"
                                      IsEnabled="{Binding ButtonIsEnabled, NotifyOnSourceUpdated=True}" 
                                      SelectClicked="profileCatalog_SelectClicked" 
                                      SelectionDone="profileCatalog_SelectionDone"/>
        <Button x:Name="AddHierarchicObject" 
            Content="{tsd:Loc albl_Add_row}" HorizontalAlignment="Left" Margin="10,10,0,0" 
            Command="{Binding AddHierarchicObject_Click}" 
            CommandParameter="{Binding ElementName=HODataGrid}"
            Grid.Row="3" VerticalAlignment="Top" Width="180" Height="30" Grid.ColumnSpan="2" Grid.Column="1"/>
        <Button x:Name="DeleteHierarchicObject" 
            Content="{tsd:Loc albl_Delete_row}" HorizontalAlignment="Left" Margin="10,10,0,0" 
            Command="{Binding DeleteHierarchicObject_Click}" 
            CommandParameter="{Binding ElementName=HODataGrid}"
            Grid.Row="4" VerticalAlignment="Top" Width="180" Height="30" Grid.ColumnSpan="2" Grid.Column="1"/>
        <CheckBox x:Name="InstantUpdate" Content="{tsd:Loc albl_Update_parts_instantly}"
                  IsChecked="{Binding InstantUpdate}"
                  HorizontalAlignment="Left" Margin="10,10,0,0" Grid.Row="6" 
                  VerticalAlignment="Top" Height="30" Width="180" Grid.ColumnSpan="2" Grid.Column="1" ClickMode="Press"/>
        <CheckBox x:Name="ModificationBlocked" Content="{tsd:Loc albl_Table_is_blocked}"
                  IsChecked="{Binding ModificationBlocked, UpdateSourceTrigger=PropertyChanged}"
                  HorizontalAlignment="Left" Margin="10,10,0,0" Grid.Row="5" 
                  VerticalAlignment="Top" Height="30" Width="180" Grid.ColumnSpan="2" Grid.Column="1" ClickMode="Press"/>
        <Button x:Name="UpdateModelObjectFromHierarchicObject" 
                Content="{tsd:Loc albl_Update_parts}" HorizontalAlignment="Right" Margin="10" 
                Command="{Binding UpdateModelObjectFromHierarchicObject_Click}" 
                CommandParameter="{Binding ElementName=InstantUpdate}"
                Grid.Row="6" VerticalAlignment="Top" Width="120" Height="30"/>
        <ComboBox ItemsSource ="{Binding BillOfElementsList, UpdateSourceTrigger =PropertyChanged}" 
                  SelectedItem="{Binding SelectedBOE, UpdateSourceTrigger=PropertyChanged}"
                  
                  Grid.Column="1" Margin="10" Grid.ColumnSpan="2"/>
        <Button x:Name="SelectUnboundedParts" 
            Content="{tsd:Loc albl_Unbounded_parts}" HorizontalAlignment="Right" Margin="0,10,140,0" 
            Command="{Binding SelectUnboundParts_Click}" 
            CommandParameter="{Binding ElementName=HODataGrid}"
            Grid.Row="6" VerticalAlignment="Top" Width="160" Height="30"/>
        <CheckBox x:Name="WindowOnTop" Content="{tsd:Loc albl_Window_on_top}"
            IsChecked="{Binding WindowOnTop, UpdateSourceTrigger=PropertyChanged}"
            Command="{Binding SetOnTop}" 
            CommandParameter="{Binding ElementName=ThisWindow}"
            HorizontalAlignment="Left" Margin="10,45,0,0" Grid.Row="5" 
            VerticalAlignment="Top" Height="30" Width="180" Grid.ColumnSpan="2" Grid.Column="1" ClickMode="Press"/>
        <!--CommandParameter="{Binding ElementName=HODataGrid}"-->

        <!--<DataGrid x:Name="dg" AutoGenerateColumns="False" IsReadOnly="False" CanUserAddRows="False" GridLinesVisibility="All" ColumnWidth="*" >

            <DataGrid.Columns>
                <DataGridTextColumn Header="Name" Binding="{Binding Data.Name}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="DataGridCell">
                                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{TemplateBinding Background}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                                            <StackPanel Orientation="Horizontal">
                                                <ToggleButton x:Name="Expander"                                               
                                          Margin="{Binding Level,Converter={StaticResource LevelToIndentConverter}}"
                                          IsChecked="{Binding Path=IsExpanded, UpdateSourceTrigger=PropertyChanged}"
                                          ClickMode="Press" >
                                                    <ToggleButton.Style>
                                                        <Style  TargetType="{x:Type ToggleButton}">
                                                            <Setter Property="Focusable" Value="False"/>
                                                            <Setter Property="Width" Value="19"/>
                                                            <Setter Property="Height" Value="13"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                        <Border Width="19" Height="13" Background="Transparent">
                                                                            <Border Width="9" Height="9"
                                                                              BorderThickness="0"
                                                                              BorderBrush="#FF7898B5"
                                                                              CornerRadius="1"
                                                                              SnapsToDevicePixels="true">
                                                                                <Border.Background>
                                                                                    <SolidColorBrush Color="Transparent"/>
                                                                                    -->
        <!--
                                                                                    <LinearGradientBrush StartPoint="0,0"
                                                                                        EndPoint="1,1">
                                                                                        <LinearGradientBrush.GradientStops>
                                                                                            <GradientStop Color="White"
                                                                                    Offset=".2"/>
                                                                                            <GradientStop Color="#FFC0B7A6"
                                                                                    Offset="1"/>
                                                                                        </LinearGradientBrush.GradientStops>
                                                                                    </LinearGradientBrush>
                                                                                -->
        <!--
                                                                                </Border.Background>
                                                                                <Path x:Name="ExpandPath"                                      
                                                                            Data="M0,0 L0,6 L6,0 z"
                                                                            Fill="Transparent"
                                                                            Stroke="{DynamicResource BlackBrush}" Margin="1,2,1,1">
                                                                                    <Path.RenderTransform>
                                                                                        <RotateTransform Angle="135"
                                                                                     CenterY="3"
                                                                                     CenterX="3" />
                                                                                    </Path.RenderTransform>
                                                                                </Path>
                                                                                -->
        <!--
                                                                            <Path x:Name="ExpandPath"
                                                                            Margin="1,1,1,1"
                                                                            Fill="Black"
                                                                            Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                                                                            -->
        <!--
                                                                            </Border>
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsChecked"
                                                                            Value="True">
                                                                                <Setter Property="RenderTransform"
                                                                                TargetName="ExpandPath">
                                                                                    <Setter.Value>
                                                                                        <RotateTransform Angle="180"
                                                                                     CenterY="3"
                                                                                     CenterX="3" />
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                                <Setter Property="Fill"
                                                                                TargetName="ExpandPath"
                                                                                Value="{DynamicResource MahApps.Brushes.Gray1}" />
                                                                                <Setter Property="Stroke"
                                                                                TargetName="ExpandPath"
                                                                                Value="{DynamicResource BlackBrush}" />

                                                                                -->
        <!--
                                                                                    <Setter Property="Data"
                                                                            TargetName="ExpandPath"
                                                                            Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                                                                            -->
        <!--
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Style>
                                                    </ToggleButton.Style>
                                                </ToggleButton>

                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                                        Content="{TemplateBinding Content}"
                                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                        Margin="{TemplateBinding Padding}"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />


                                            </StackPanel>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding HasChildren}" Value="False">
                                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="M" Binding="{Binding Data.M}"/>
                <DataGridTextColumn Header="N" Binding="{Binding Data.N}"/>
                <DataGridTextColumn Header="Q" Binding="{Binding Data.Q}"/>
                <DataGridTextColumn Header="Material" Binding="{Binding Data.Material}"/>
                <DataGridTextColumn Header="Comment" Binding="{Binding Data.Comment}"/>

            </DataGrid.Columns>
        </DataGrid> -->
    </Grid>
</tsd:ApplicationWindowBase>
