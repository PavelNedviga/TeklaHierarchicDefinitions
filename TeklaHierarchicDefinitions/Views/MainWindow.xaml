<tsd:ApplicationWindowBase  x:Class="TeklaHierarchicDefinitions.MainWindow"
                            Name="ThisWindow"
                            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                            xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                            xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"                            
                            xmlns:UIControls="clr-namespace:Tekla.Structures.Dialog.UIControls;assembly=Tekla.Structures.Dialog" 
                            xmlns:tsd="clr-namespace:Tekla.Structures.Dialog;assembly=Tekla.Structures.Dialog"
                            xmlns:Convertors="clr-namespace:TeklaHierarchicDefinitions"
                            xmlns:bhvr="http://schemas.microsoft.com/xaml/behaviors"
                            Icon="pack://application:,,,/THD;component/Resources/Element list.png"
                            xmlns:local="clr-namespace:TeklaHierarchicDefinitions"
                            xmlns:vm="clr-namespace:TeklaHierarchicDefinitions.ViewModels" 
                            mc:Ignorable="d"
                            Title="{tsd:Loc albl_WindowName}"
                            Height="650" Width="1250" MinWidth="1350" MinHeight="680" Topmost="True">
    <Window.Resources>
        <Convertors:LevelToIndentConverter x:Key="LevelToIndentConverter"/>
    </Window.Resources>
    <Window.DataContext>
        <vm:BillOfElementsViewModel/>
    </Window.DataContext>
    <Grid>

        <TabControl>
            <TabItem Header="{tsd:Loc albl_ElementList}">
                <Grid Background="#FFE5E5E5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="50"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="50"/>
                        <RowDefinition Height="50"/>
                        <RowDefinition Height="50"/>
                        <RowDefinition Height="50"/>
                        <RowDefinition Height="50"/>
                        <RowDefinition Height="50"/>
                        <RowDefinition Height="90"/>
                        <RowDefinition Height="50"/>
                        <RowDefinition/>
                        <RowDefinition Height="50"/>
                    </Grid.RowDefinitions>
                    <DataGrid Name="HODataGrid" 
                      CanUserDeleteRows="False"
                          
                      Margin="10,10,10,10" ItemsSource="{Binding BillOfElements, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                      CanUserAddRows="False" CanUserResizeColumns="False" 
                      CanUserResizeRows="False" HeadersVisibility="Column" 
                      CellEditEnding="HODataGrid_CellEditEnding"
                          
                      SelectedItem="{Binding SelectedItem}" 
                              IsSynchronizedWithCurrentItem="False"
                      SelectionChanged="HODataGrid_SelectionChanged"
                      AutoGenerateColumns="False" Grid.ColumnSpan="1" Grid.RowSpan="9"
                      IsReadOnly="{Binding ModificationBlocked, NotifyOnSourceUpdated=True}">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="{tsd:Loc albl_Selection}"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <CheckBox IsChecked="{Binding Selection, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                              Command="{Binding DataContext.UpdateButtonsAccessCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                            </CheckBox>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="{tsd:Loc albl_Num}" Binding="{Binding ObjectsCount, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_BOE}" Binding="{Binding BOE, UpdateSourceTrigger=PropertyChanged}" />
                            <!--<DataGridTemplateColumn Header="ВЭ" >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Grid>
                                    <TextBox 
                                        Text="{Binding BOE, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0" 
                                        IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}">
                                        <TextBox.InputBindings>

                                            <KeyBinding  Command="{Binding DataContext.UpdateBillOfElementsList, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                                                         Key="Enter">
                                            
                                            </KeyBinding>
                                        </TextBox.InputBindings>
                                    </TextBox>
                                </Grid>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>-->
                            <!--<DataGridTemplateColumn Header="{tsd:Loc albl_Presets}"  >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Grid>
                                    <ComboBox ItemsSource ="{Binding ElementPresetList, UpdateSourceTrigger =PropertyChanged}" 
                                              SelectedItem="{Binding ElementSelectedPreset, UpdateSourceTrigger =PropertyChanged}"/>

                                </Grid>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>-->
                            <DataGridTextColumn Header="{tsd:Loc albl_Mark}" 
                                        Binding="{Binding Mark,Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=LostFocus}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Father}" IsReadOnly="True" Binding="{Binding Father, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Position}" Binding="{Binding Position, UpdateSourceTrigger=LostFocus}" />
                            <DataGridTextColumn Header="{tsd:Loc albl_Classificator}" 
                                        Binding="{Binding Classificator, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Categories}" 
                                                Binding="{Binding Category, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                FontWeight="Bold"/>

                            <DataGridTextColumn Header="{tsd:Loc albl_Material}" Binding="{Binding Material, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_MaterialLabel}" Binding="{Binding MaterialLabel, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Profile}" Binding="{Binding Profile, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" />
                            <DataGridTextColumn Header="{tsd:Loc albl_ProfileForSpec}" Binding="{Binding ProfileForSpec, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel>
                                            <Label Content="Start="/>
                                            <Label Content="End="/>
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="M"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <DockPanel Grid.Row="0">

                                                <TextBox Text="{Binding M,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>

                                            </DockPanel>
                                            <DockPanel Grid.Row="1">

                                                <TextBox Text="{Binding M_end,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="0" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>
                                            </DockPanel>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="M обр."  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <DockPanel Grid.Row="0">

                                                <TextBox Text="{Binding MyStartReverse,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>

                                            </DockPanel>
                                            <DockPanel Grid.Row="1">

                                                <TextBox Text="{Binding MyEndReverse,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="0" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>
                                            </DockPanel>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="{tsd:Loc albl_MSummary}" Binding="{Binding M_summary, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTemplateColumn Header="N раст"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <DockPanel Grid.Row="0">
                                                <TextBox Text="{Binding N, UpdateSourceTrigger=PropertyChanged}" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>

                                            </DockPanel>
                                            <DockPanel Grid.Row="1">
                                                <TextBox Text="{Binding N_end, UpdateSourceTrigger=PropertyChanged}" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>
                                            </DockPanel>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="N сж"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <DockPanel Grid.Row="0" >
                                                <TextBox Text="{Binding N_start_min, UpdateSourceTrigger=PropertyChanged}" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>
                                            </DockPanel>
                                            <DockPanel Grid.Row="1" >
                                                <TextBox Text="{Binding N_end_min, UpdateSourceTrigger=PropertyChanged}" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>
                                            </DockPanel>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="{tsd:Loc albl_NSummary}" Binding="{Binding N_summary, UpdateSourceTrigger=PropertyChanged}"/>

                            <DataGridTemplateColumn Header=" Qz "  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <DockPanel Grid.Row="0">
                                                <TextBox Text="{Binding Q, UpdateSourceTrigger=PropertyChanged}" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>

                                            </DockPanel>
                                            <DockPanel Grid.Row="1">
                                                <TextBox Text="{Binding Q_end, UpdateSourceTrigger=PropertyChanged}" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>
                                            </DockPanel>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header=" Qy "  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <DockPanel Grid.Row="0">
                                                <TextBox Text="{Binding Q_y, UpdateSourceTrigger=PropertyChanged}" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>

                                            </DockPanel>
                                            <DockPanel Grid.Row="1">
                                                <TextBox Text="{Binding Q_end_y, UpdateSourceTrigger=PropertyChanged}" 
                                                 IsReadOnly="{Binding DataContext.ModificationBlocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, NotifyOnSourceUpdated=True}"/>
                                            </DockPanel>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="{tsd:Loc albl_QSummary}" Binding="{Binding Q_summary, UpdateSourceTrigger=PropertyChanged}"/>
                            <!--DataGridTemplateColumn Header="{tsd:Loc albl_MomentConnections}"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <ComboBox Grid.Row="0" 
                                        SelectedValue="{Binding StartMomentConnection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        ItemsSource="{Binding MomentConnection, Mode=TwoWay}"
                                        SelectedValuePath="Key"
                                        DisplayMemberPath="Value" />
                                            <ComboBox Grid.Row="1" 
                                        SelectedValue="{Binding EndMomentConnection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        ItemsSource="{Binding MomentConnection, Mode=OneWay}"
                                        SelectedValuePath="Key"
                                        DisplayMemberPath="Value" />
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn-->
                            <DataGridTemplateColumn Header="{tsd:Loc albl_FrictionConnections}"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <ComboBox Grid.Row="0" 
                                        SelectedValue="{Binding StartFrictionConnection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        ItemsSource="{Binding FrictionConnection, Mode=TwoWay}"
                                        SelectedValuePath="Key"
                                        DisplayMemberPath="Value" />
                                            <ComboBox Grid.Row="1" 
                                        SelectedValue="{Binding EndFrictionConnection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        ItemsSource="{Binding FrictionConnection, Mode=OneWay}"
                                        SelectedValuePath="Key"
                                        DisplayMemberPath="Value" />
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="{tsd:Loc albl_RotationNotAllowed}"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <ComboBox Grid.Row="0" 
                                                SelectedValue="{Binding RotNotAllowed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                ItemsSource="{Binding RotationOptions, Mode=TwoWay}"
                                                SelectedValuePath="Key"
                                                DisplayMemberPath="Value" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="{tsd:Loc albl_Notes}" Binding="{Binding Notes, UpdateSourceTrigger=PropertyChanged}"/>

                            <DataGridTextColumn Header="{tsd:Loc albl_Sketch}" Binding="{Binding Sketch, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" />
                            <DataGridCheckBoxColumn Header="{tsd:Loc albl_Cross_section_on_other_list}" Binding="{Binding OnOtherList, UpdateSourceTrigger=PropertyChanged}"/>
                            <!--<DataGridCheckBoxColumn Header="{tsd:Loc albl_Is_complex_cross_section}" Binding="{Binding IsComplexCrossSection, UpdateSourceTrigger=PropertyChanged}"/>-->
                            <DataGridTextColumn Header="{tsd:Loc albl_Ref_list}" Binding="{Binding RefList, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Empty_rows_number}" Binding="{Binding EmptyRowsNumber, UpdateSourceTrigger=PropertyChanged}"/>

                            <!--<DataGridTextColumn Header="GUID" Binding="{Binding GUID}" />-->
                            <!--<DataGridTextColumn Header="Father GUID" Binding="{Binding FatherGUID}" />-->
                            <!--<DataGridTemplateColumn Header="Выбор" Width="60" >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <UIControls:WpfMaterialCatalog x:Name="materialCatalog" 
                                                               HorizontalAlignment="Center" 
                                                               VerticalAlignment="Center" 
                                                               Height="30"
                                                               SelectClicked="MaterialCatalog_SelectClicked"  
                                                               SelectionDone="MaterialCatalog_SelectionDone" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>-->
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="{tsd:Loc albl_AttachHOposition}" Command="{Binding AddToHO_Click}" />
                                <MenuItem Header="{tsd:Loc albl_RemoveFromHO}" Command="{Binding RemoveFromHO_Click}" />
                                <MenuItem Header="{tsd:Loc albl_CopyHOposition}" Command="{Binding CopyHO_Click}" />
                                <MenuItem Header="{tsd:Loc albl_SelectDeselectRows}" Command="{Binding SelectDeselectRows_Click}" />
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>

                    <Button x:Name="AddModelObjectToHierarchicObject" Content="{tsd:Loc albl_Attach_parts}" HorizontalAlignment="Left" Margin="10,0,0,0" 
                    Grid.Row="9" VerticalAlignment="Center" Width="130" Height="30" 
                    Command="{Binding AddModelObjectToHierarchicObject_Click}" 
                    CommandParameter="{Binding ElementName=HODataGrid}"/>
                    <CheckBox x:Name="HightlightObjects" Content="{tsd:Loc albl_Highlight_objects_in_model_view}" 
                      HorizontalAlignment="Left" Margin="150,0,0,0" Grid.Row="9" 
                      VerticalAlignment="Center" Height="30" Width="200"/>
                    <Button x:Name="RemoveModelObjectFromHierarchicObject" 
                    Content="{tsd:Loc albl_Remove_parts}" HorizontalAlignment="Left" Margin="360,0,0,0" 
                    Command="{Binding RemoveModelObjectFromHierarchicObject_Click}" 
                    CommandParameter="{Binding ElementName=HODataGrid}"
                    Grid.Row="9" VerticalAlignment="Center" Width="120" Height="30"/>
                    <!--<Button Content="Select material" Grid.Column="1" Margin="10" Grid.Row="2" IsEnabled="{Binding ButtonIsEnabled}"
                    Command="{Binding SelectMaterialForHierarchicObject_Click}" 
                    CommandParameter="{Binding ElementName=HODataGrid}"/>-->
                    <Label Content="{tsd:Loc albl_Select_profile}" Grid.Column="1" Margin="10,0,0,0" Grid.Row="1" VerticalAlignment="Center" 
                   Height="30" controls:ControlsHelper.ContentCharacterCasing="Upper"/>
                    <UIControls:WpfMaterialCatalog x:Name="materialCatalog" Grid.Column="2"
                                           Height="30" Margin="0,10,0,10" Grid.Row="2" 
                                           Width="30" HorizontalAlignment="Center" 
                                           IsEnabled="{Binding ButtonIsEnabled, NotifyOnSourceUpdated=True}" 
                                           SelectClicked="MaterialCatalog_SelectClicked" 
                                           SelectionDone="MaterialCatalog_SelectionDone" />
                    <Label Content="{tsd:Loc albl_Select_material}" Grid.Column="1" Grid.Row="2" Margin="10,10,0,10" controls:ControlsHelper.ContentCharacterCasing="Upper" />
                    <UIControls:WpfProfileCatalog x:Name="profileCatalog" HorizontalAlignment="Center" Height="30" Grid.Row="1" Grid.Column="2" VerticalAlignment="Center" 
                                          Width="30"
                                          IsEnabled="{Binding ButtonIsEnabled, NotifyOnSourceUpdated=True}" 
                                          SelectClicked="profileCatalog_SelectClicked" 
                                          SelectionDone="profileCatalog_SelectionDone"/>
                    <Button x:Name="AddHierarchicObject" 
                Content="{tsd:Loc albl_Add_row}" HorizontalAlignment="Left" Margin="10,0,0,0" 
                Command="{Binding AddHierarchicObject_Click}" 
                CommandParameter="{Binding ElementName=HODataGrid}"
                Grid.Row="4" VerticalAlignment="Center" Width="180" Height="30" Grid.ColumnSpan="2" Grid.Column="1"/>
                    <Button x:Name="DeleteHierarchicObject" 
                Content="{tsd:Loc albl_Delete_row}" HorizontalAlignment="Left" Margin="10,0,0,0" 
                Command="{Binding DeleteHierarchicObject_Click}" 
                CommandParameter="{Binding ElementName=HODataGrid}"
                Grid.Row="5" VerticalAlignment="Center" Width="180" Height="30" Grid.ColumnSpan="2" Grid.Column="1"/>
                    <CheckBox x:Name="InstantUpdate" Content="{tsd:Loc albl_Update_parts_instantly}"
                      IsChecked="{Binding InstantUpdate}"
                      HorizontalAlignment="Left" Margin="10,0,0,0" Grid.Row="9" 
                      VerticalAlignment="Center" Height="30" Width="180" Grid.ColumnSpan="2" Grid.Column="1" ClickMode="Press"/>
                    <CheckBox x:Name="ModificationBlocked" Content="{tsd:Loc albl_Table_is_blocked}"
                      IsChecked="{Binding ModificationBlocked, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Left" Margin="10,10,0,0" Grid.Row="6" 
                      VerticalAlignment="Top" Height="30" Width="180" Grid.ColumnSpan="2" Grid.Column="1" ClickMode="Press"/>
                    <Button x:Name="UpdateModelObjectFromHierarchicObject" 
                    Content="{tsd:Loc albl_Update_parts}" HorizontalAlignment="Left" Margin="714,0,0,0" 
                    Command="{Binding UpdateModelObjectFromHierarchicObject_Click}" 
                    CommandParameter="{Binding ElementName=InstantUpdate}"
                    Grid.Row="9" VerticalAlignment="Center" Width="120" Height="30"/>
                    <StackPanel Grid.Column="1" Grid.ColumnSpan="2" Orientation="Horizontal">
                        <ComboBox ItemsSource ="{Binding BillOfElementsList, UpdateSourceTrigger =PropertyChanged}" 
                             SelectedItem="{Binding SelectedBOE, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"                                            
                            Margin="10" IsEditable="False" Width="80"/>
                        <TextBox Margin="10" HorizontalAlignment="Stretch" Width="80"
                                 Text ="{Binding BOELChanger, UpdateSourceTrigger=LostFocus}"/>

                    </StackPanel>
                    <Button x:Name="SelectUnboundedParts" 
                Content="{tsd:Loc albl_Unbounded_parts}" HorizontalAlignment="Left" Margin="544,0,0,0" 
                Command="{Binding SelectUnboundParts_Click}" 
                CommandParameter="{Binding ElementName=HODataGrid}"
                Grid.Row="9" VerticalAlignment="Center" Width="160" Height="30"/>
                    <CheckBox x:Name="WindowOnTop" Content="{tsd:Loc albl_Window_on_top}"
                IsChecked="{Binding WindowOnTop, UpdateSourceTrigger=PropertyChanged}"
                Command="{Binding SetOnTop}" 
                CommandParameter="{Binding ElementName=ThisWindow}"
                HorizontalAlignment="Left" Margin="10,45,0,0" Grid.Row="6" 
                VerticalAlignment="Top" Height="30" Width="180" Grid.ColumnSpan="2" Grid.Column="1" ClickMode="Press"/>
                    <Button x:Name="SelectSimilarParts" 
                        Content="{tsd:Loc albl_SelectSimilarParts}" HorizontalAlignment="Center" Margin="10,10" 
                        Command="{Binding SelectSimilarParts_Click}" 
                        CommandParameter="{Binding ElementName=HODataGrid}"
                        Grid.Row="7" VerticalAlignment="Center" Width="180" Height="30" Grid.Column="1" Grid.ColumnSpan="2" Grid.RowSpan="1"/>
                    <Button x:Name="BorrowProperties" 
                        Content="{tsd:Loc albl_BorrowProperties}" HorizontalAlignment="Center" Margin="10,10" 
                        Command="{Binding BorrowProperties_Click}" 
                        CommandParameter="{Binding ElementName=HODataGrid}"
                        Grid.Row="3" VerticalAlignment="Center" Width="180" Height="30" Grid.Column="1" Grid.ColumnSpan="2" Grid.RowSpan="1"/>
                    <StackPanel Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="8" >
                        <CheckBox x:Name="FilterByMark" Content="{tsd:Loc albl_FilterMark}"
                            IsChecked="{Binding FilterByMark, UpdateSourceTrigger=PropertyChanged}"
                            HorizontalAlignment="Left" Margin="10,5" 
                            VerticalAlignment="Top" Width="180" ClickMode="Press"/>
                        <CheckBox x:Name="FilterByProfile" Content="{tsd:Loc albl_FilterProfile}"
                            IsChecked="{Binding FilterByProfile, UpdateSourceTrigger=PropertyChanged}"
                            HorizontalAlignment="Left" Margin="10,5" 
                            VerticalAlignment="Top" Width="180" ClickMode="Press"/>
                        <CheckBox x:Name="FilterByMaterial" Content="{tsd:Loc albl_FilterMaterial}"
                            IsChecked="{Binding FilterByMaterial, UpdateSourceTrigger=PropertyChanged}"
                            HorizontalAlignment="Left" Margin="10,5" 
                            VerticalAlignment="Top"  Width="180" ClickMode="Press"/>

                    </StackPanel>

                    <!--CommandParameter="{Binding ElementName=HODataGrid}"-->

                    <!--<DataGrid x:Name="dg" AutoGenerateColumns="False" IsReadOnly="False" CanUserAddRows="False" GridLinesVisibility="All" ColumnWidth="*" >

                <DataGrid.Columns>
                    <DataGridTextColumn Header="Name" Binding="{Binding Data.Name}">
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="DataGridCell">
                                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                                                <StackPanel Orientation="Horizontal">
                                                    <ToggleButton x:Name="Expander"                                               
                                              Margin="{Binding Level,Converter={StaticResource LevelToIndentConverter}}"
                                              IsChecked="{Binding Path=IsExpanded, UpdateSourceTrigger=PropertyChanged}"
                                              ClickMode="Press" >
                                                        <ToggleButton.Style>
                                                            <Style  TargetType="{x:Type ToggleButton}">
                                                                <Setter Property="Focusable" Value="False"/>
                                                                <Setter Property="Width" Value="19"/>
                                                                <Setter Property="Height" Value="13"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                            <Border Width="19" Height="13" Background="Transparent">
                                                                                <Border Width="9" Height="9"
                                                                                  BorderThickness="0"
                                                                                  BorderBrush="#FF7898B5"
                                                                                  CornerRadius="1"
                                                                                  SnapsToDevicePixels="true">
                                                                                    <Border.Background>
                                                                                        <SolidColorBrush Color="Transparent"/>
                                                                                        -->
                    <!--
                                                                                        <LinearGradientBrush StartPoint="0,0"
                                                                                            EndPoint="1,1">
                                                                                            <LinearGradientBrush.GradientStops>
                                                                                                <GradientStop Color="White"
                                                                                        Offset=".2"/>
                                                                                                <GradientStop Color="#FFC0B7A6"
                                                                                        Offset="1"/>
                                                                                            </LinearGradientBrush.GradientStops>
                                                                                        </LinearGradientBrush>
                                                                                    -->
                    <!--
                                                                                    </Border.Background>
                                                                                    <Path x:Name="ExpandPath"                                      
                                                                                Data="M0,0 L0,6 L6,0 z"
                                                                                Fill="Transparent"
                                                                                Stroke="{DynamicResource BlackBrush}" Margin="1,2,1,1">
                                                                                        <Path.RenderTransform>
                                                                                            <RotateTransform Angle="135"
                                                                                         CenterY="3"
                                                                                         CenterX="3" />
                                                                                        </Path.RenderTransform>
                                                                                    </Path>
                                                                                    -->
                    <!--
                                                                                <Path x:Name="ExpandPath"
                                                                                Margin="1,1,1,1"
                                                                                Fill="Black"
                                                                                Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                                                                                -->
                    <!--
                                                                                </Border>
                                                                            </Border>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="IsChecked"
                                                                                Value="True">
                                                                                    <Setter Property="RenderTransform"
                                                                                    TargetName="ExpandPath">
                                                                                        <Setter.Value>
                                                                                            <RotateTransform Angle="180"
                                                                                         CenterY="3"
                                                                                         CenterX="3" />
                                                                                        </Setter.Value>
                                                                                    </Setter>
                                                                                    <Setter Property="Fill"
                                                                                    TargetName="ExpandPath"
                                                                                    Value="{DynamicResource MahApps.Brushes.Gray1}" />
                                                                                    <Setter Property="Stroke"
                                                                                    TargetName="ExpandPath"
                                                                                    Value="{DynamicResource BlackBrush}" />

                                                                                    -->
                    <!--
                                                                                        <Setter Property="Data"
                                                                                TargetName="ExpandPath"
                                                                                Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                                                                                -->
                    <!--
                                                                                </Trigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>
                                                        </ToggleButton.Style>
                                                    </ToggleButton>

                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                                            Content="{TemplateBinding Content}"
                                                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                            Margin="{TemplateBinding Padding}"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />


                                                </StackPanel>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <DataTrigger Binding="{Binding HasChildren}" Value="False">
                                                    <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="M" Binding="{Binding Data.M}"/>
                    <DataGridTextColumn Header="N" Binding="{Binding Data.N}"/>
                    <DataGridTextColumn Header="Q" Binding="{Binding Data.Q}"/>
                    <DataGridTextColumn Header="Material" Binding="{Binding Data.Material}"/>
                    <DataGridTextColumn Header="Comment" Binding="{Binding Data.Comment}"/>

                </DataGrid.Columns>
            </DataGrid> -->
                </Grid>

            </TabItem>
            <TabItem Header="{tsd:Loc albl_FoundationLoads}">
                <Grid Background="#FFE5E5E5" Name="gr" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="250"/>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" VerticalAlignment="Stretch" Margin="0">
                        <TextBox Margin="10" Text="{Binding NewBuildingFragmentName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <Button Height="30" Margin="10" Content="Создать" 
                                Command="{Binding AddBuildingFragment}"/>
                        <Button Height="30" Margin="10" Content="Удалить" 
                                Command="{Binding DeleteBuildingFragment}"/>
                        <ListBox MinHeight="120" Margin="10" VerticalAlignment="Stretch" Height="150"
                                 ItemsSource="{Binding BuildingFragments, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                 SelectedItem="{Binding SelectedBuildingFragment, Mode=OneWayToSource, UpdateSourceTrigger=Default}"
                                 >
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBox Text="{Binding BuildingFragmentMark, Mode=TwoWay, UpdateSourceTrigger=Default}" 
                                             Style="{DynamicResource MahApps.Styles.TextBox}" HorizontalAlignment="Left" Margin="20,0"/>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                        <Button Grid.Column="0" Height="30" Margin="10" Content="Импорт" 
                                Command="{Binding ImportBuildingFragment}"/>
                        <DockPanel HorizontalAlignment="Stretch">
                            <Button Grid.Column="0" Height="40" Width="40" Margin="30,10" 
                                    Content="+" FontSize="20" 
                                    DockPanel.Dock="Left" HorizontalAlignment="Right"
                                    Command="{Binding AddObjectsToFoundationGroup}"
                                    CommandParameter="{Binding ElementName=FoundationList}"
                                    Style="{DynamicResource MahApps.Styles.Button.MetroSquare.Accent}"/>
                            <Button Grid.Column="0" Height="40" Width="40" Margin="30,10" 
                                    Content="-" FontSize="20" 
                                    DockPanel.Dock="Right" HorizontalAlignment="Right"
                                    CommandParameter="{Binding ElementName=FoundationList}"
                                    Command="{Binding RemoveObjectsFromFoundationGroup}"
                                    Style="{DynamicResource MahApps.Styles.Button.MetroSquare.Accent}"/>
                        </DockPanel>

                    </StackPanel>
                    <ListBox Margin="10" Grid.Column="1" Height="Auto" Name="FoundationList"
                             ItemsSource="{Binding FoundationMarksList, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                             SelectedItem="{Binding SelectedFoundationMark, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"/>

                    <!--ItemsSource="{d:SampleData ItemCount=5}"-->


                    <DataGrid  
                      Grid.Column="2"
                      CanUserDeleteRows="False"
                      Margin="10,10,10,10" ItemsSource="{Binding FoundationGroups, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                      CanUserAddRows="False" CanUserResizeColumns="False" 
                      CanUserResizeRows="False" HeadersVisibility="Column" 
                      CellEditEnding="HODataGrid_CellEditEnding"
                      SelectedItem="{Binding SelectedItem}" 
                      SelectionChanged="HODataGrid_SelectionChanged"
                      AutoGenerateColumns="False" Grid.ColumnSpan="1" Grid.RowSpan="3"
                      IsReadOnly="True"
                        >
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Номер базы" 
                                        Binding="{Binding BasementMark, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="Номер узла эРСУ" 
                                        Binding="{Binding JointNumber, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <!--DataGridTextColumn Header="Кр." 
                                        Binding="{Binding Cr, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/-->
                            <!--DataGridTextColumn Header="О." 
                                        Binding="{Binding Sp, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/-->
                            <!--DataGridTextColumn Header="Гр." 
                                        Binding="{Binding Gr, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/-->
                            <DataGridTextColumn Header="Rx(кН)" 
                                        Binding="{Binding Rx, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="Ry(кН)" 
                                        Binding="{Binding Ry, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="Rz(кН)" 
                                        Binding="{Binding Rz, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="Rux(кНм)" 
                                        Binding="{Binding Rux, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="Ruy(кНм)" 
                                        Binding="{Binding Ruy, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="Ruz(кНм)" 
                                        Binding="{Binding Ruz, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="№ загружения" 
                                        Binding="{Binding ForceMark, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>

                        </DataGrid.Columns>


                    </DataGrid>
                    <mah:ProgressRing Margin="0,375,0,0" IsActive="{Binding Attaching, UpdateSourceTrigger=Explicit}" Visibility="Visible" VerticalAlignment="Top" Width="40" Height="40"/>

                </Grid>
            </TabItem>
            <TabItem x:Name="tabItem" Header="{tsd:Loc albl_SBOM}">
                <Grid Background="#FFE5E5E5" >
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="220"/>
                        <ColumnDefinition Width="auto" MinWidth="400" MaxWidth="910"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <DataGrid Grid.Column="1"
                             ItemsSource="{Binding SteelBOMPositions}" AutoGenerateColumns="False"
                             d:ItemsSource="{d:SampleData ItemCount=5}" Margin="10,10,10,10" Grid.RowSpan="2" 
                              SelectionChanged="SBOMDataGridSimple_SelectionChanged">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{tsd:Loc albl_Material}" 
                                        Binding="{Binding Material, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        />
                            <DataGridTextColumn Header="{tsd:Loc albl_Categories}" 
                                        Binding="{Binding Category, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        />
                            <DataGridTextColumn Header="{tsd:Loc albl_Profile}" 
                                        Binding="{Binding Profile, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MaxWidth="400"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Weight}" 
                                        Binding="{Binding WeightRounded, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        />
                            <DataGridTextColumn Header="{tsd:Loc albl_WeightGross}" 
                                        Binding="{Binding WeightGrossRounded, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        />
                            <DataGridTextColumn Header="{tsd:Loc albl_AttachedToEL}" 
                                                Binding="{Binding AttachedToEL, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                                FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_ProfileGost}" 
                                        Binding="{Binding ProfileGost, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MaxWidth="350">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>

                    <DataGrid Name="Profiles" Grid.Column="5" Grid.Row="0" HorizontalAlignment="Stretch"
                              ItemsSource="{Binding SteelBOMPositionsByProfile}" AutoGenerateColumns="False" SelectedItem="{Binding SelectedSBOMProfile, Mode=TwoWay, UpdateSourceTrigger=Default}"
                              d:ItemsSource="{d:SampleData ItemCount=5}" Margin="10,10,10,10" Grid.RowSpan="2" SelectionChanged="SBOMDataGrid_SelectionChanged">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{tsd:Loc albl_Profile}" 
                                        Binding="{Binding Profile, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Weight}" 
                                        Binding="{Binding WeightRounded, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_WeightGross}" 
                                        Binding="{Binding WeightGrossRounded, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                        </DataGrid.Columns>
                    </DataGrid>
                    <DataGrid Name="Materials" Grid.Column="3" Grid.Row="0" HorizontalAlignment="Stretch" SelectionChanged="SBOMDataGrid_SelectionChanged"
                              ItemsSource="{Binding SteelBOMPositionsByMaterial}" AutoGenerateColumns="False" SelectedItem="{Binding SelectedSBOMMaterial, Mode=TwoWay, UpdateSourceTrigger=Default}"
                              mah:MultiSelectorHelper.SelectedItems="{Binding SelectedSBOMMaterials,UpdateSourceTrigger=PropertyChanged}"
                              d:ItemsSource="{d:SampleData ItemCount=5}" Margin="10,10,10,10" Grid.RowSpan="1">
                        <!--<i1:Interaction.Triggers >
                            <i1:EventTrigger EventName="SelectionChanged">
                                <i1:InvokeCommandAction Command="{Binding SelectedSBOMMaterials}" 
                                           CommandParameter="{Binding SelectedItems, ElementName=Materials}"/>
                            </i1:EventTrigger>
                        </i1:Interaction.Triggers>-->
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{tsd:Loc albl_Material}" 
                                        Binding="{Binding Material, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Weight}" 
                                        Binding="{Binding WeightRounded, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_WeightGross}" 
                                        Binding="{Binding WeightGrossRounded, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                        </DataGrid.Columns>
                    </DataGrid>
                    <DataGrid Name="Categories" Grid.Column="3" Grid.Row="1" HorizontalAlignment="Stretch"
                            ItemsSource="{Binding SteelBOMPositionsByCategory}" AutoGenerateColumns="False" SelectedItem="{Binding SelectedSBOMCategory, Mode=TwoWay, UpdateSourceTrigger=Default}"
                            d:ItemsSource="{d:SampleData ItemCount=5}" Margin="10" Grid.RowSpan="1" SelectionChanged="SBOMDataGrid_SelectionChanged">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{tsd:Loc albl_Categories}" 
                                    Binding="{Binding Category, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                    FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Weight}" 
                                    Binding="{Binding WeightRounded, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                    FontWeight="Bold"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_WeightGross}" 
                                        Binding="{Binding WeightGrossRounded, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                        FontWeight="Bold"/>
                        </DataGrid.Columns>
                    </DataGrid>
                    <StackPanel Grid.Column="0" Orientation="Vertical" Grid.RowSpan="2">
                        <Button Content="{tsd:Loc albl_AddSBOMParts}" Margin="10" VerticalAlignment="Top" Height="30"
                                Command="{Binding AddSBOMParts}"/>
                        <Label Content="{tsd:Loc albl_Net}" Margin="10,10,10,5"/>
                        <TextBox Margin="10,5" Text="{Binding SummarySBOMParts, Mode=OneWay, UpdateSourceTrigger=Default}"/>
                        <Label Content="{tsd:Loc albl_Gross}" Margin="10,5"/>
                        <TextBox Margin="10,5" Text="{Binding SummaryGrossSBOMParts, Mode=OneWay, UpdateSourceTrigger=Default}"/>
                        <CheckBox x:Name="HightlightSBOMObjects" Content="{tsd:Loc albl_Highlight_objects_in_model_view}" 
                                  HorizontalAlignment="Left" Margin="10"  
                                  VerticalAlignment="Center" Height="30" Width="210" IsChecked="True"/>
                        <CheckBox x:Name="SelectUnattachedObjectsOnly" Content="{tsd:Loc albl_SelectUnattachedObjectsOnly}" 
                                  HorizontalAlignment="Left" Margin="10"  
                                  VerticalAlignment="Center" Height="30" Width="210" IsChecked="True"/>
                        <ListBox ItemsSource ="{Binding AttachmentsToVE}"                                  
                                 SelectedItem ="{Binding SelectedAttachmentToEL, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="10"/>
                        <Button Content="{tsd:Loc albl_UnselectAll}" Margin="10" VerticalAlignment="Top" Height="30"
                                Command="{Binding UnselectAll}" >
                        </Button>
                        <!--<Button.CommandParameter>
                                <MultiBinding Converter="{StaticResource MyMultiConverter}">
                                    <Binding Path="..." ElementName="MyTextBox"/>
                                    <Binding Path="..." ElementName="MySomethingElse"/>
                                </MultiBinding>
                            </Button.CommandParameter>-->
                        <mah:ProgressRing Margin="10" IsActive="{Binding IsLoadingSBOM, UpdateSourceTrigger=Explicit}" Visibility="Visible" VerticalAlignment="Top" Width="60" Height="60"/>
                    </StackPanel>
                    <GridSplitter Grid.Column="2" HorizontalAlignment="Stretch" Grid.RowSpan="2" VerticalAlignment="Stretch" Width="10" ResizeBehavior="PreviousAndNext" ResizeDirection="Columns"/>

                </Grid>
            </TabItem>
            <TabItem x:Name="Album" Header="{tsd:Loc albl_AlbumDefinition}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="10"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="320"/>
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <!--<GridSplitter Grid.Column="1" Grid.Row="1" HorizontalAlignment="Stretch" 
                                  Grid.RowSpan="1" VerticalAlignment="Stretch" 
                                  ResizeBehavior="PreviousAndNext" ResizeDirection="Rows"/>-->


                    <DataGrid Margin="10" d:ItemsSource="{d:SampleData ItemCount=5}" CanUserAddRows="False" CanUserDeleteRows="False"
                              ItemsSource="{Binding VisibleDrawingManipulators, Mode=OneWay, UpdateSourceTrigger=Default}" 
                              SelectedItem="{Binding SelectedDrawingManipulator, Mode=TwoWay, UpdateSourceTrigger=Default}"
                              Grid.Column="1" Grid.RowSpan="1" Grid.Row="2"
                               AutoGenerateColumns="False"
                              SelectionChanged="DataGrid_SelectionChanged">
                        <!--<DataGrid.Resources>
                        mah:MultiSelectorHelper.SelectedItems="{Binding SelectedDrawingManipulators, Mode=OneWayToSource, UpdateSourceTrigger=Default}"
                            <Style TargetType="DataGridRow">
                                <Setter Property="IsSelected"
                                        Value="{Binding IsSelected}" />
                            </Style>
                        </DataGrid.Resources>-->
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{tsd:Loc albl_Code}" Binding="{Binding Code, Mode=OneWay, UpdateSourceTrigger=Default}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Mark}" Binding="{Binding Mark, Mode=OneWay, UpdateSourceTrigger=Default}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Complex}" Binding="{Binding Complex, Mode=OneWay, UpdateSourceTrigger=Default}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_List}" Binding="{Binding List, Mode=Default, UpdateSourceTrigger=Default}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Lists}" Binding="{Binding Lists, Mode=Default, UpdateSourceTrigger=Default}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Album}" Binding="{Binding Album, Mode=Default, UpdateSourceTrigger=Default}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Title1}" Binding="{Binding Title1, Mode=Default, UpdateSourceTrigger=Default}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Title2}" Binding="{Binding Title2, Mode=Default, UpdateSourceTrigger=Default}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Title3}" Binding="{Binding Title3, Mode=Default, UpdateSourceTrigger=Default}"/>
                        </DataGrid.Columns>

                    </DataGrid>
                    <StackPanel Grid.Column="1" 
                                Grid.RowSpan="1" 
                                Grid.Row="0" Orientation="Horizontal">
                        <Grid Height="290" Width="990" Margin="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="13*"/>
                                <ColumnDefinition Width="14*"/>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition Width="4*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="2*"/>
                                <RowDefinition Height="3*"/>
                                <RowDefinition Height="3*"/>
                                <RowDefinition Height="3*"/>
                            </Grid.RowDefinitions>
                            <StackPanel Margin="5"  Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2"/>
                            <Image x:Name="image1" Margin="-5"
                                   Grid.Column="0" Grid.Row="0" Grid.RowSpan="4" Grid.ColumnSpan="5"
                                   
                                   Source="/Resources/rus_Forma_F3_drawing.bmp"/>
                            <StackPanel Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="4" Orientation="Horizontal"
                                        HorizontalAlignment="Center" VerticalAlignment="Center">
                                <TextBox Text="{Binding ModelCode.PropertyValue, Mode=Default, UpdateSourceTrigger=Default}"/>
                                <Label Content="-"/>
                                <TextBox Text="{Binding DrawingsAlbum.PropertyValue, Mode=TwoWay, UpdateSourceTrigger=Default}"/>
                            </StackPanel>
                            <DataGrid x:Name="drawingProps"
                                      Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="4"
                                      Margin="10,2"  HeadersVisibility="None"
                                      HorizontalAlignment="Stretch" d:ItemsSource="{d:SampleData ItemCount=5}"
                                      ItemsSource="{Binding ConstructionObjectPropertyFillersList, Mode=OneWay, UpdateSourceTrigger=Default}"
                                      TextBlock.TextAlignment="Center"
                                      CanUserAddRows="False" CanUserDeleteRows="False" AutoGenerateColumns="False">
                                <DataGrid.Columns>
                                    <!--<DataGridTextColumn Header="{tsd:Loc albl_Property}" Binding="{Binding PropertyName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>-->
                                    <DataGridTextColumn  Header="{tsd:Loc albl_Value}" 
                                                         Binding="{Binding PropertyValue, Mode=TwoWay,
                                        UpdateSourceTrigger=PropertyChanged}"
                                                         Width="600"/>
                                </DataGrid.Columns>
                                <DataGrid.InputBindings>
                                    <KeyBinding Command="{Binding UpdateAlbumList}"                                             
                                                Key="Enter" />
                                </DataGrid.InputBindings>
                            </DataGrid>

                            <DataGrid x:Name="drawingObjectProps"  
                                      Grid.Row="2" Grid.Column="1" Margin="10,2"  HeadersVisibility="None"
                                      HorizontalAlignment="Stretch" d:ItemsSource="{d:SampleData ItemCount=4}"
                                      ItemsSource="{Binding ObjectPropertyFillersList, Mode=OneWay, UpdateSourceTrigger=Default}"
                                      TextBlock.TextAlignment="Center"
                                      HorizontalScrollBarVisibility="Disabled"
                                      CanUserAddRows="False" CanUserDeleteRows="False" AutoGenerateColumns="False" >
                                <!--<DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Style.Setters>
                                            <Setter Property="HorizontalAlignment" Value="Center"/>
                                        </Style.Setters>
                                    </Style>
                                </DataGrid.CellStyle>-->
                                <!--<DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Style.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter Property="Background" Value="Green"/>
                                                <Setter Property="Foreground" Value="Yellow"/>
                                                <Setter Property="BorderBrush" Value="Aqua"/>
                                            </Trigger>
                                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                                <Setter Property="BorderBrush" Value="Red" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.CellStyle>-->
                                <DataGrid.Columns>
                                    <!--<DataGridTextColumn Header="{tsd:Loc albl_Property}" Binding="{Binding PropertyName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>-->
                                    <DataGridTextColumn  Header="{tsd:Loc albl_Value}" 
                                                         Binding="{Binding PropertyValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                         Width="340" CanUserResize="True" CanUserReorder="False"/>
                                </DataGrid.Columns>
                                <DataGrid.InputBindings>
                                    <KeyBinding Command="{Binding UpdateAlbumList}"                                             
                                                Key="Enter" />
                                </DataGrid.InputBindings>
                            </DataGrid>
                            <DataGrid Height="150" HorizontalAlignment="Left" Grid.Row="2" Grid.RowSpan="2"
                                      ScrollViewer.VerticalScrollBarVisibility ="Hidden"
                                      HorizontalScrollBarVisibility="Disabled"
                                      VerticalScrollBarVisibility="Disabled"
                                      VerticalAlignment="Center" Width="210"
                                      d:ItemsSource="{d:SampleData ItemCount=6}" HeadersVisibility="None"
                                      ItemsSource="{Binding AlbumDesigners, Mode=OneWay, UpdateSourceTrigger=Default}"
                                      CanUserAddRows="False" CanUserDeleteRows="False" AutoGenerateColumns="False">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Width="100"  Header="{tsd:Loc albl_PersonPosition}" Binding="{Binding PropertyValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    <DataGridTextColumn Width="95"  Header="{tsd:Loc albl_Surname}" Binding="{Binding PropertyValue2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                            <StackPanel Grid.Column="0" Grid.Row="2" HorizontalAlignment="Right">
                                <!--<TextBox Margin="5" HorizontalContentAlignment="Right" Width="50"
                                         Text="{Binding AlbumPhase.PropertyValue, Mode=TwoWay, UpdateSourceTrigger=Default}" 
                                         />
                                <DatePicker 
                                    Text="{Binding DrawingsDates.PropertyValue, Mode=TwoWay, UpdateSourceTrigger=Default}"
                                    IsTodayHighlighted="True" FirstDayOfWeek="Monday" SelectedDateFormat="Short"/>-->
                            </StackPanel>
                            <DataGrid Grid.Row="3" Grid.Column="2" Grid.ColumnSpan="3" 
                                      Margin="10,2"
                                      d:ItemsSource="{d:SampleData ItemCount=3}" 
                                      CanUserAddRows="False" 
                                      CanUserDeleteRows="False" 
                                      AutoGenerateColumns="False"
                                      ItemsSource="{Binding CompanyNamePropertyFillers, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                      HorizontalScrollBarVisibility="Disabled"
                                      VerticalScrollBarVisibility="Disabled"
                                      VerticalAlignment="Center" HeadersVisibility="None" 
                                      TextBlock.TextAlignment="Center" 
                                      ScrollViewer.VerticalScrollBarVisibility ="Hidden">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Width="248" Binding="{Binding PropertyValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                            <StackPanel Grid.Column="2" Grid.Row="2">
                                <TextBox Margin="10,40" HorizontalContentAlignment="Center"
                                         Text="{Binding AlbumPhase.PropertyValue, Mode=TwoWay, UpdateSourceTrigger=Default}" 
                                         />
                            </StackPanel>
                            <StackPanel  Grid.Column="3" Grid.Row="2">
                                <TextBox Margin="10,40" HorizontalContentAlignment="Center"
                                         Text="{Binding ListNumber.PropertyValue, Mode=TwoWay, UpdateSourceTrigger=Default}" />
                            </StackPanel>
                            <StackPanel  Grid.Column="4" Grid.Row="2">
                                <TextBox Margin="10,40" HorizontalContentAlignment="Center"
                                         Text="{Binding ListsInAlbumTotal.PropertyValue, Mode=TwoWay, UpdateSourceTrigger=Default}"/>
                            </StackPanel>

                            <DataGrid Grid.Row="3" Grid.Column="1" Margin="10,2"  
                                      HeadersVisibility="None"
                                      HorizontalAlignment="Stretch" 
                                      d:ItemsSource="{d:SampleData ItemCount=3}"
                                      HorizontalScrollBarVisibility="Disabled"
                                      VerticalScrollBarVisibility="Disabled"
                                      ItemsSource="{Binding TitleFillerList, Mode=OneWay, UpdateSourceTrigger=Default}"
                                      TextBlock.TextAlignment="Center"
                                      CanUserAddRows="False" 
                                      CanUserDeleteRows="False" 
                                      AutoGenerateColumns="False" >
                                <DataGrid.Columns>
                                    <DataGridTextColumn  Header="{tsd:Loc albl_Value}" 
                                                         Binding="{Binding PropertyValue, Mode=TwoWay, UpdateSourceTrigger=Default}"
                                                         Width="354" CanUserResize="False" CanUserReorder="False"/>
                                </DataGrid.Columns>
                                <DataGrid.InputBindings>
                                    <KeyBinding Command="{Binding UpdateAlbumList}"                                             
                                                Key="Enter" />
                                </DataGrid.InputBindings>
                            </DataGrid>
                        </Grid>
                    </StackPanel>
                    <StackPanel Grid.Column="0" Grid.RowSpan="3">
                        <ListBox d:ItemsSource="{d:SampleData ItemCount=5}" Grid.RowSpan="1"
                                 ItemsSource="{Binding DrawingAlbums, UpdateSourceTrigger=Default}"
                                 SelectedItem="{Binding SelectedDrawingAlbum,Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}" Margin="10"
                                 MaxHeight="300">
                            <!--<ListBox.ItemTemplate>
                                <DataTemplate>
                                    
                                </DataTemplate>
                            </ListBox.ItemTemplate>-->
                        </ListBox>
                        <TextBox Name="AlbumRenaming"  Text="{Binding SelectedDrawingAlbum, UpdateSourceTrigger=LostFocus}" Margin="10">
                            <TextBox.InputBindings>
                                <KeyBinding Command="{Binding Path=UpdateAlbum}" 
                                            CommandParameter="{Binding ElementName=AlbumRenaming}" 
                                            Key="Enter" />
                            </TextBox.InputBindings>
                        </TextBox>
                        <Button Content="{tsd:Loc albl_UpdDrawingList}"
                                Command="{Binding UpdateDrawingList}" Margin="10"/>
                        <DataGrid VerticalAlignment="Stretch" Margin="10" ItemsSource="{Binding ModelPropertyFillers, Mode=Default, UpdateSourceTrigger=LostFocus}" 
                                  CanUserAddRows="False" CanUserDeleteRows="False" AutoGenerateColumns="False">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="{tsd:Loc albl_Property}" Binding="{Binding PropertyName, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <DataGridTextColumn Header="{tsd:Loc albl_Value}" Binding="{Binding PropertyValue, Mode =TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    Width="150">
                                    <DataGridTextColumn.ElementStyle>
                                        <Style>
                                            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                        </Style>
                                    </DataGridTextColumn.ElementStyle>
                                </DataGridTextColumn>
                            </DataGrid.Columns>

                        </DataGrid>
                        <Button Content="{tsd:Loc albl_CreateCSV}" Margin="10"
                                Command="{Binding CreateCsv}"/>
                        <Button x:Name="loadFromOtherMDR" 
                                Content="{tsd:Loc albl_LoadFromOtherMDR}" Margin="10"
                                Command="{Binding LoadFromCsv}"/>
                        <ListBox Name="CsvData" d:ItemsSource="{d:SampleData ItemCount=5}" 
                                 Margin="10" Height="80" ItemsSource="{Binding BorrowedListFromCsv}">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock 
                                        Text="{Binding Path=Complex}" 
                                        ToolTipService.ToolTip="{Binding Path=Tooltip}"
                                        ToolTipService.InitialShowDelay="10"
                                        ToolTipService.ShowDuration="20000"
                                        />
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                        <Button x:Name="applyToSelectedDrawings" 
                                Command="{Binding BorrowFromCsv}"
                                CommandParameter="{Binding ElementName=CsvData, Path=SelectedItem}"
                                Content="{tsd:Loc albl_ApplyToSelectedDrawings}" 
                                Margin="10"/>
                    </StackPanel>

                </Grid>
            </TabItem>

            <TabItem x:Name="checkResults" Header="{tsd:Loc albl_CheckResults}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>

                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="320"/>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="10"/>
                        <ColumnDefinition Width="2*"/>
                    </Grid.ColumnDefinitions>
                    <GridSplitter Grid.Column="2" Grid.RowSpan="3"/>
                    <Button x:Name="loadCheckResults" 
                                Content="{tsd:Loc albl_LoadCheckResults}" Margin="10,10,10,10"
                                Command="{Binding LoadCheckResults}"/>
                    <StackPanel Grid.Row="1">
                        <Label Content="Коды ошибок групп и параметров:" Margin="10"/>
                        <ListBox d:ItemsSource="{d:SampleData ItemCount=5}" Grid.RowSpan="1"
                             Grid.Row="1"
                                 ItemsSource="{Binding CheckResults, UpdateSourceTrigger=Default}"
                                 SelectedItem="{Binding SelectedCheckResult, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="10"
                                 MaxHeight="300"
                                 DisplayMemberPath="CheckResultsCode"
                                 >
                        </ListBox>
                        <ListBox Grid.Row="0" Grid.Column="0" Margin="10" Grid.RowSpan="2"
                             HorizontalAlignment="Stretch"
                            d:ItemsSource="{d:SampleData ItemCount=2}"
                             ItemsSource="{Binding CheckResultsDescription, 
                        UpdateSourceTrigger=Default}"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                        >
                            <ListBox.ItemTemplate>
                                <DataTemplate>

                                    <TextBlock Text="{Binding}" TextWrapping="Wrap" />

                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </StackPanel>

                    <ListBox x:Name="guidErrorObjList" Grid.Row="0" Grid.Column="1" Margin="10" Grid.RowSpan="2"
                             HorizontalAlignment="Stretch"
                            d:ItemsSource="{d:SampleData ItemCount=2}"
                             ItemsSource="{Binding CheckResultsObjects, Mode=Default,
                        UpdateSourceTrigger=PropertyChanged}"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                             SelectionMode="Extended">
                        <bhvr:Interaction.Triggers >
                            <bhvr:EventTrigger EventName="SelectionChanged">
                                <bhvr:InvokeCommandAction 
                                    Command="{Binding SelectErrorObjectsByGuids}"
                                    CommandParameter="{Binding ElementName=guidErrorObjList}"/>
                            </bhvr:EventTrigger>
                        </bhvr:Interaction.Triggers>
                    </ListBox>
                    <DataGrid x:Name="summaryErrorList" Grid.Row="0" Grid.Column="3" Margin="10" Grid.RowSpan="2"
                             HorizontalAlignment="Stretch"
                            d:ItemsSource="{d:SampleData ItemCount=2}"
                             ItemsSource="{Binding CheckResultsSummary, Mode=OneWay,
                        UpdateSourceTrigger=PropertyChanged}"
                              AutoGenerateColumns="False"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                             SelectionMode="Extended">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{tsd:Loc albl_CheckName}" Binding="{Binding CheckName, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Result}" Binding="{Binding Result, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Description}" Binding="{Binding Description, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_TotalChecks}" Binding="{Binding TotalChecks, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_Errornumber}" Binding="{Binding ErrorNumber, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="{tsd:Loc albl_ErrorRate}" Binding="{Binding ErrorRate, Mode =OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </DataGrid.Columns>
                        <!--<bhvr:Interaction.Triggers >
                            <bhvr:EventTrigger EventName="SelectionChanged">
                                <bhvr:InvokeCommandAction 
                                    Command="{Binding SelectErrorObjectsByGuids}"
                                    CommandParameter="{Binding ElementName=guidErrorObjList}"/>
                            </bhvr:EventTrigger>
                        </bhvr:Interaction.Triggers>-->
                    </DataGrid>
                </Grid>
            </TabItem>
        </TabControl>
        <Button Content="?" Width="30" Height="30" 
                HorizontalAlignment="Right" VerticalAlignment="Top" 
                Command="{Binding ReleaseNotes_Click}"
                Margin="5" Style="{DynamicResource MahApps.Styles.Button.ToolBar}" />
    </Grid>

</tsd:ApplicationWindowBase>
